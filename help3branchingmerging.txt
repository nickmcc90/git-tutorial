1. Merging
2. Branching
3. Feature Branch Workflow

---Branching----

Imagine that you are working on some code for your job. You make two commits, but they are works-in-progress,
and you plan on going back to look at them/fix them.
Then your boss comes up to you and says that there is a bug in their website and they want you to fix it. What
you wouldn't do is save a commit that fixes the bug right after the two commits that you made because you aren't
sure if those WIPs work yet. 
The solution would be to branch off your WIPs, and have the bug fixing code be in the main branch of code. 

So basically, you can have the bug fix on the main branch of code, while your new feature WIPs can be on a separate branch.

**Let's make a folder called git-brancing for this lesson.

<Timestamp: 4:11> About to get past the 3 commits and talk about branching.

Now that I've made the 3 base commits, let's make a branch. Type:
  git branch 'branch-name' 

Check work with:
  git log --all --graph

There should be two green words next to your commit. The main, and then whatever you called your branch. The arrow
should be pointing to main, because we are still in the main branch. Let's swap to our new branch:
  git checkout 'branch-name'
  git log --all --graph

Now the arrow should be pointing toward the new branch. We can add commits here and have it be on the new branch.

---
I accidentally messed up and added a commit to main. In order to delete it, I typed in:
  git reset --soft HEAD~
Then that commit was gone.
---

So I've added two commits so far. Now let's do the part where we fix a bug on main. We want to go back to
main branch:
  git checkout main
The files made from the feature are deleted now, but stashed away in its branch.

If we check git log, we will actually see a branching off effect.



---Merging---

With the past example, we have that branch that we were working on with the features. We don't
want them to be features forever..... we'll eventually want to put the bug fix and the features
all into our code as one finished product. We use merging here.

When we merge, we sustain both changes from both files we are merging.

When we merge, the result will go onto the branch you are currently working on.

<time stamp 15:25>

Now that we are on our main branch. Let's merge. Remember we have to add a message name too, because
this merge will be saved in a commit.
  git merge feature1 -m 'merging commit'
Now we check our work with:
  git log --all --graph
And it has a pretty design of the branches merging together with our final commit.



---Merge conflicts-----
This is when git doesn't know what the result of the merge should be. 
I.e the same line of code in two branches was deleted and made into something different
from one another.

In order to practice this, let's make 2 different branches, and change the same code, and
try to merge them.

After doing this, git is telling us that it doesn't know what to do. It pulls open a tab in vs code
and shows us the current change within the HEAD (the current branch that we are on), and then the
'incoming change' which should be the other branch we are trying to merge which should be conflicting
with our current branch code.

In order to tell git which change we want, we just delete everything that we don't want from the page
that git is showing us in vscode. We also could just delete everything SINGLE thing and write some new
code, git doesn't care. It'll put whatever we leave in the page into a new commit.

To finish this merge, we just create a new commit with the code we want.


----Feature Branch Workflow------

What are feature branches?

They are a step-by-step process for using Git and Github.

One feature branch is like the one we did during the branch tutorial earlier in this file. One thing
we missed from that lesson though was code reviews. Typically, when we finish a branch, another
software engineer will look at the code to proofread it.

So, how do we use Git and Github to do code reviews? Let's see.

Feature Branch Workflow Steps
1. Create a feature branch **we know how to do this
2. Upload this branch to Github (remote repository. The main branch and the feature will be uploaded all in one.)
3. Create a pull request (doing the code reviews, testing it.)
4. Merge feature branch into main branch. (This time, we'll merge on Github)

<30:29> About to go step by step through an example of feature branch workflow.

First we make the new branch
  git branch 'new-feature'
Then we make a commit on that branch
  git add .
  git commit -m 'new-feature'
Then we make a new repository and connect it
  git remote add origin https----link
Then we switch to the main branch and upload it
  git checkout main
  git push origin main
Now we are gonna switch to our branch and upload it
  git checkout new-feature
  git push origin new-feature

We can do a pull request now. In github, in the repository, go to the pull requests tab and
hit the green button that says new pull request. Then, it'll ask what to compare the main branch
to, so you'll select new-feature (or whatever the branch is called). Then we hit green button that
says create pull request, then make a comment describing the feature, then hit create pull request again
near the bottom.

You can send this url to people to open and they can make comments through hovering and clicking
a blue plus over the code. 

Once the comments are done, we can merge this, now on GitHub. To do this, we just click the merge pull
request button that's green on the page. 

Now that we've done this merging on github remotely, we'll wanna sync these changes locally. We type:
  git fetch
  git log --all --graph
to see our changes from remote. Then we switch to main branch and type:
  git pull origin main
to sync changes.


----Merge conflicts in feature branch workflow-----

Two engineers have their own branch with a change to master on the same file, and the same line.
Engineer 1 follows the workflow and merges their code with main, no problem. Engineer 2 does the
same thing, but since their branch has modified what engineer 1 modified before (same file, same
line), it creates a conflict.

To delete a branch:
  git branch -D 'branch-name'

So I have made two different branches 'feature1' 'feature2' I've made commits in them where
the same file and same line is changed to something different. I've uploaded them both to
github. I've created a pull request for both of them too. So at this point, people are
reviewing them.

Feature1 gets merged first. Then we'll see in the pull request of feature2 that there is a
conflict. To solve this, we click web editor that's underlined, and do the same thing as before,
delete everything we don't want and resolve the conflict.

Instead of the web editor, we can resolve the conflict on our computer, locally.

Let's make the same situation but with 'feature3' and 'feature4'

For the branch that is found to create conflicts, feature 4 (the branch we chose 2nd to merge),
we are going to first:
  git checkout main
  git pull origin main
  git checkout feature4
  git merge main
  **pick the best code in vscode
  git add .
  git commit -m 'resolution'
  git push origin feature4
This should show in remote GitHub, as done. The pull request will still show to merge, but in small
text it should show our commit name.

<Done!>
